{
	"statements": [
		{
			"query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPInstance)-[:MEMBER_OF_GCP_VPC]->(n:GCPVpc) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Instance-to-VPC relationships that are out of date."
		},
		{
			"query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPInstance)-[r:MEMBER_OF_GCP_VPC]->(:GCPVpc) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Instance-to-VPC relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPVpc)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP VPCs that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPVpc)<-[r:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP VPC-to-Project relationships that are out of date."
		}
	],
	"name": "cleanup GCP VPCs"
}
