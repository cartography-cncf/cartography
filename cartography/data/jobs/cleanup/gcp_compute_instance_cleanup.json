{
	"statements": [
		{
			"query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPInstance)-[:NETWORK_INTERFACE]-(n:GCPNetworkInterface) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Network Interfaces and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPInstance)-[r:NETWORK_INTERFACE]-(:GCPNetworkInterface) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Instance-to-NetworkInterface relationships that are out of date."
		},
		{
			"query": "MATCH (:GCPVpc)<-[r:DEFINED_IN]-(:GCPNetworkTag)<-[:TAGGED]-(:GCPInstance)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP VPC-to-Tag relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPNetworkTag)<-[:TAGGED]-(:GCPInstance)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Network Tags that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPInstance)-[r:TAGGED]-(:GCPNetworkTag) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Instance-to-Tag relationships that are out of date."
		},
		{
			"query": "MATCH (n:GCPInstance)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Delete GCP Instances that no longer exist and detach them from all previously connected nodes."
		},
		{
			"query": "MATCH (:GCPInstance)<-[r:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
			"iterative": true,
			"iterationsize": 100,
			"__comment__": "Remove GCP Instance-to-Project relationships that are out of date."
		}
	],
	"name": "cleanup GCP Instances"
}
