{
    "statements": [
        {
            "query": "MATCH (n:GCPFirestoreIndex)<-[:HAS_INDEX]-(:GCPFirestoreDatabase)-[:RESOURCE]->(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP Firestore Index that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:GCPFirestoreIndex)<-[r:HAS_INDEX]-(:GCPFirestoreDatabase)-[:RESOURCE]->(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP GCPFirestoreIndex-to-Database relationships that are out of date."
        },
        {
            "query": "MATCH (n:GCPFirestoreDatabase)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP Firestore Databases that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:GCPFirestoreDatabase)<-[r:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP GCPFirestoreDatabase-to-Project relationships that are out of date."
        }
    ],
    "name": "Cleanup GCP Firestore."
}
