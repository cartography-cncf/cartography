{
    "statements": [
        {
            "query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPServiceAccount)-[:HAS_KEY]->(n:GCPServiceAccountKey) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP IAM Service Account Keys that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:GCPProject{id: {GCP_PROJECT_ID}})-[:RESOURCE]->(:GCPServiceAccount)-[r:HAS_KEY]->(:GCPServiceAccountKey) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP Project to IAM Service Account Keys relationships that are out of date"
        },
        {
            "query": "MATCH (n:GCPServiceAccount)<-[:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE n.lastupdated <> {UPDATE_TAG} WITH n LIMIT {LIMIT_SIZE} DETACH DELETE (n) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Delete GCP IAM Service Account that no longer exist and detach them from all previously connected nodes."
        },
        {
            "query": "MATCH (:GCPServiceAccount)<-[r:RESOURCE]-(:GCPProject{id: {GCP_PROJECT_ID}}) WHERE r.lastupdated <> {UPDATE_TAG} WITH r LIMIT {LIMIT_SIZE} DELETE (r) return COUNT(*) as TotalCompleted",
            "iterative": true,
            "iterationsize": 100,
            "__comment__": "Remove GCP GCPServiceAccount-to-Project relationships that are out of date."
        }
    ],
    "name": "Cleanup GCP IAM Service Accounts."
}
