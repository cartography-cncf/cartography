{
    "name": "Semgrep SCA findings risk analysis",
    "statements": [
        {
            "__comment__": "ARCHIVED -> Risk = Info",
            "query": "MATCH (g:GitHubRepository{archived:true})<-[:FOUND_IN]-(s:SemgrepSCAFinding) SET s.risk = 'INFO' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "reachability = UNREACHABLE -> Risk = Info",
            "query": "MATCH (s:SemgrepSCAFinding{reachability:'UNREACHABLE'}) SET s.risk = 'INFO' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "not possible to identify if reachable && version specifier is the only flag of the vulnerability && severity in [low, medium, high] -> Risk = Info",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'UNKNOWN_EXPOSURE', reachability_check:'VERSION_SPECIFIER'}) WHERE s.severity IN ['LOW', 'MEDIUM', 'HIGH'] SET s.risk = 'INFO' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "not possible to identify if reachable && version specifier is the only flag of the vulnerability && severity = critical -> Risk = Low",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'UNKNOWN_EXPOSURE', reachability_check:'VERSION_SPECIFIER'}) WHERE s.severity = 'CRITICAL' SET s.risk = 'LOW' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "manual review required to confirm && version specifier is the only flag of the vulnerability && severity in [low, medium] -> Risk = Low",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'MANUAL_REVIEW_REACHABLE'}) WHERE s.severity IN ['LOW', 'MEDIUM'] SET s.risk = 'LOW' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "manual review required to confirm && version specifier is the only flag of the vulnerability && severity = high -> Risk = Medium",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'MANUAL_REVIEW_REACHABLE'}) WHERE s.severity = 'HIGH' SET s.risk = 'MEDIUM' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "manual review required to confirm && version specifier is the only flag of the vulnerability &&  severity = critical -> Risk = High",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'MANUAL_REVIEW_REACHABLE'}) WHERE s.severity = 'CRITICAL' SET s.risk = 'HIGH' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "adding the vulnerable version flags it reachable && everity in [low, medium] -> Risk = Low",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'ALWAYS_REACHABLE'}) WHERE s.severity IN ['LOW','MEDIUM'] SET s.risk = 'LOW' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "adding the vulnerable version flags it reachable && everity = high -> Risk = Low",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'ALWAYS_REACHABLE'}) WHERE s.severity = 'HIGH' SET s.risk = 'MEDIUM' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "adding the vulnerable version flags it reachable (special case for critical, if something is so critical that needs to be fixed) && everity = critical -> Risk = Critical",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'ALWAYS_REACHABLE'}) WHERE s.severity = 'CRITICAL' SET s.risk = 'CRITICAL' return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "if reachability analysis confirmed that is rechable -> Risk = Severity",
            "query": "MATCH (g:GitHubRepository{archived:false})<-[:FOUND_IN]-(s:SemgrepSCAFinding{reachability:'REACHABLE', reachability_check:'REACHABILITY'}) SET s.risk = s.severity return COUNT(*) as TotalCompleted",
            "iterative": false
        },
        {
            "__comment__": "delete SemgrepSCAFinding.risk property if not updated by the previous statements",
            "query": "MATCH (s:SemgrepSCAFinding) WHERE s.risk IS NOT NULL AND s.lastupdated <> $UPDATE_TAG REMOVE s.risk return COUNT(*) as TotalCompleted",
            "iterative": false
        }
        
    ],
    "comment": "First fill information, at the end run a cleanup statement"
}